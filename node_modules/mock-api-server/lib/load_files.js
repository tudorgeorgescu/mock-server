// Generated by CoffeeScript 1.12.2
'use strict';
var async, each, fileStat, filter, fs, loadingActions, map, path, recursivelyFindFiles, ref, safeFilenames;

async = require('async');

path = require('path');

fs = require('fs');

ref = require('underscore'), each = ref.each, filter = ref.filter, map = ref.map;

safeFilenames = function(filenames) {
  return filter(filenames, function(filename) {
    return filename !== '.DS_Store';
  });
};

fileStat = function(file, done) {
  return fs.stat(file.path, done);
};

recursivelyFindFiles = function(root, resultPrefix, done) {
  return fs.readdir(root, function(err, filenames) {
    var files;
    if (err != null) {
      return done(err);
    }
    files = map(safeFilenames(filenames), function(filename) {
      return {
        path: path.join(root, filename),
        resultPath: path.join(resultPrefix, filename)
      };
    });
    return async.map(files, fileStat, function(err, statBuffers) {
      var results, subActions;
      if (err != null) {
        return done(err);
      }
      results = [];
      subActions = [];
      each(statBuffers, function(statBuffer, i) {
        var file;
        file = files[i];
        if (statBuffer.isDirectory()) {
          return subActions.push(function(done) {
            return recursivelyFindFiles(file.path, file.resultPath, done);
          });
        } else {
          return results.push(file);
        }
      });
      return async.series(subActions, function(err, listOfSubResults) {
        if (err != null) {
          return done(err);
        }
        each(listOfSubResults, function(subResults) {
          return results = results.concat(subResults);
        });
        return done(null, results);
      });
    });
  });
};

loadingActions = function(files) {
  var actions;
  actions = {};
  each(files, function(file) {
    return actions[file.resultPath] = function(done) {
      return fs.readFile(file.path, done);
    };
  });
  return actions;
};

module.exports = function(path, done) {
  return recursivelyFindFiles(path, '/', function(err, files) {
    if (err != null) {
      return done(err);
    }
    return async.parallel(loadingActions(files), done);
  });
};

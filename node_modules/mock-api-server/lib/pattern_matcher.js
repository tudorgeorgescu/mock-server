// Generated by CoffeeScript 1.12.2
'use strict';
var FAIL, START, WILDCARD, compileNFA, each, failOnAny, keys, patternMatcher, ref;

ref = require('underscore'), each = ref.each, keys = ref.keys;

WILDCARD = '*';

FAIL = 0;

START = 1;

failOnAny = function() {
  var state;
  state = {};
  state[WILDCARD] = FAIL;
  return state;
};

compileNFA = function(pattern) {
  var currentState, states, successState;
  states = [];
  states[FAIL] = failOnAny();
  currentState = START;
  each(pattern, function(char) {
    if (states[currentState] == null) {
      states[currentState] = failOnAny();
    }
    if (char === WILDCARD) {
      return states[currentState][WILDCARD] = currentState;
    } else {
      states[currentState][char] = currentState + 1;
      return currentState += 1;
    }
  });
  if (states[currentState] == null) {
    states[currentState] = failOnAny();
  }
  successState = currentState;
  return {
    states: states,
    successState: successState
  };
};

module.exports = patternMatcher = function(pattern) {
  var ref1, states, successState;
  if (!pattern) {
    return false;
  }
  ref1 = compileNFA(pattern), states = ref1.states, successState = ref1.successState;
  return function(value) {
    var currentStates;
    currentStates = {};
    currentStates[START] = true;
    each(value, function(char) {
      var nextStates;
      nextStates = {};
      each(keys(currentStates), function(state) {
        nextStates[states[state][WILDCARD]] = true;
        if (states[state][char] != null) {
          return nextStates[states[state][char]] = true;
        }
      });
      return currentStates = nextStates;
    });
    return currentStates[successState] != null;
  };
};

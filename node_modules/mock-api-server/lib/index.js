// Generated by CoffeeScript 1.12.2
'use strict';
var Dsl, MockApi, child_process, request,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

child_process = require('child_process');

Dsl = require('./dsl');

request = require('sync-request');

MockApi = (function() {
  function MockApi(options) {
    this.options = options;
    this._addResponseSpecification = bind(this._addResponseSpecification, this);
    this.privateSettings = {
      host: '127.0.0.1'
    };
  }

  MockApi.prototype.start = function(done) {
    var args;
    args = ['--port', this.options.port];
    if (!this.options.logToConsole) {
      args.push('--no-log-to-console');
    }
    if (this.options.testPath) {
      args.push('--test-path');
      args.push(this.options.testPath);
    }
    if (this.options.logToFile) {
      args.push('--log-to-file');
      args.push(this.options.logToFile);
    }
    child_process.spawn(__dirname + "/../bin/mock-api-server", args);
    return setTimeout(done, 500);
  };

  MockApi.prototype.stop = function(done) {
    this._sendCommand('stop');
    if (done) {
      return setTimeout(done, 500);
    }
  };

  MockApi.prototype.reset = function() {
    return this._sendCommand('reset');
  };

  MockApi.prototype.respondTo = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return new Dsl(this._addResponseSpecification, args);
  };

  MockApi.prototype._addResponseSpecification = function(spec) {
    return request('POST', "http://" + this.privateSettings.host + ":" + this.options.port + "/mock-api/add-response", {
      json: spec
    });
  };

  MockApi.prototype._sendCommand = function(name) {
    return request('GET', "http://" + this.privateSettings.host + ":" + this.options.port + "/mock-api/" + name);
  };

  return MockApi;

})();

module.exports = MockApi;

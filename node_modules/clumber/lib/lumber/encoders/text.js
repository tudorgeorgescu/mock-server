// Generated by CoffeeScript 1.3.3

/*
@license
text.js: Text Encoder

(c) 2012 Panther Development
MIT LICENSE
*/


(function() {
  var Text, common, dateFormat, events, eyes, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require("util");

  events = require("events");

  dateFormat = require("dateformat");

  eyes = require("eyes");

  common = require("../common");

  /*
  Text Encoder
  @constructor
  @implements {Encoder}
  */


  Text = (function(_super) {

    __extends(Text, _super);

    function Text(options) {
      if (options == null) {
        options = {};
      }
      Text.__super__.constructor.call(this);
      this.colorize = common.checkOption(options.colorize, true);
      this.timestamp = common.checkOption(options.timestamp, false);
      this.headFormat = common.checkOption(options.headFormat, "%l: ");
      this.dateFormat = common.checkOption(options.dateFormat, "isoDateTime");
      this.metaFormatter = common.checkOption(options.metaFormatter, this._metaFormatter);
      this.inspect = eyes.inspector({
        stream: null
      });
      this.contentType = "text/plain";
      this.encoding = "utf8";
    }

    /*
      Encodes the passed string into CSV Text
      @return {string} Encoded string
      @param {string} level The level of this message
      @param {string} msg The message to encode
      @param {object} meta The metadata of this log
    */


    Text.prototype.encode = function(level, msg, meta) {
      var head, time;
      head = this.colorize && this.colors ? this.headFormat.replace("%l", common.colorize(level.toLowerCase(), level, this.colors)).replace("%L", common.colorize(level.toUpperCase(), level, this.colors)) : this.headFormat.replace("%l", level.toLowerCase()).replace("%L", level.toUpperCase());
      time = dateFormat(new Date(), this.dateFormat);
      return head + (this.timestamp ? "(" + time + ") " : "") + msg + this._encodeMeta(meta);
    };

    Text.prototype._encodeMeta = function(meta) {
      var c, msg, props, temp;
      if (!meta) {
        return "";
      }
      if (meta.constructor === Error && false) {
        c = (this.colorize ? this.colors.error || "red" : null);
        msg = [];
        props = ["message", "name", "type", "stack", "arguments"];
        temp = void 0;
        props.forEach(function(prop) {
          if (!meta[prop]) {
            return;
          }
          if (prop === "stack") {
            temp = "  Stack Trace";
          } else {
            temp = "  Error " + common.titleCase(prop);
          }
          temp = c ? temp[c] : temp;
          temp += ": " + (prop === "stack" ? "\n  " : "") + meta[prop];
          return msg.push(temp);
        });
        return "\n" + msg.join("\n");
      }
      return this.metaFormatter(meta);
    };

    Text.prototype._metaFormatter = function(meta) {
      return "\n\u001b[36m" + this.inspect(meta);
    };

    return Text;

  })(events.EventEmitter);

  module.exports = Text;

}).call(this);

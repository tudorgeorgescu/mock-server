// Generated by CoffeeScript 1.3.3

/*
@license
console.js: Console transport

(c) 2012 Panther Development
MIT LICENSE
*/


(function() {
  var Console, events, lumber, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require("util");

  events = require("events");

  lumber = require("../../lumber");

  /*
  Console Transport
  @implements {Transport}
  */


  Console = (function(_super) {

    __extends(Console, _super);

    function Console(options) {
      var e;
      if (options == null) {
        options = {};
      }
      Console.__super__.constructor.call(this);
      this.encoder = lumber.util.checkOption(options.encoder, "text");
      this.level = lumber.util.checkOption(options.level, "info");
      this.name = "console";
      if (typeof this.encoder === "string") {
        e = lumber.util.titleCase(this.encoder);
        if (lumber.encoders[e]) {
          this.encoder = new lumber.encoders[e]();
        } else {
          throw new Error("Unknown encoder passed: " + this.encoder);
        }
      }
    }

    Console.prototype.log = function(args, cb) {
      var msg, self;
      self = this;
      msg = this.encoder.encode(args.level, args.msg, args.meta);
      if (args.level === "error") {
        console.error(msg);
      } else {
        console.log(msg);
      }
      if (cb) {
        return cb(null, msg, args.level, this.name);
      }
    };

    return Console;

  })(events.EventEmitter);

  module.exports.Console = Console;

}).call(this);

// Generated by CoffeeScript 1.3.3
(function() {
  var Process, buildError, cp, dateFormat, events, lumber, path, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require("util");

  cp = require("child_process");

  path = require("path");

  events = require("events");

  dateFormat = require("dateformat");

  lumber = require("../../lumber");

  buildError = function(command, args, error) {
    var message;
    message = "Error during lumber Process transport: " + command + " " + (args.join(' '));
    error.stack = "" + message + "\n" + error.stack;
    return error;
  };

  Process = (function(_super) {

    __extends(Process, _super);

    function Process(options) {
      var e,
        _this = this;
      if (options == null) {
        options = {};
      }
      Process.__super__.constructor.call(this);
      this["arguments"] = lumber.util.checkOption(options.command, ['tee', '/dev/null']);
      this.encoder = lumber.util.checkOption(options.encoder, "json");
      this.level = lumber.util.checkOption(options.level, "info");
      this.name = "process";
      if (typeof this.encoder === "string") {
        e = lumber.util.titleCase(this.encoder);
        if (lumber.encoders[e]) {
          this.encoder = new lumber.encoders[e]();
        } else {
          throw new Error("Unknown encoder passed: " + this.encoder);
        }
      }
      this.encoding = this.encoder.encoding;
      this.command = this["arguments"].shift();
      this._childProcess = cp.spawn(this.command, this["arguments"]);
      this._childProcess.on('error', function(error) {
        throw buildError(_this.command, _this["arguments"], error);
      });
      this._childProcess.stdout.pipe(process.stdout);
    }

    Process.prototype.log = function(args, cb) {
      var msg,
        _this = this;
      msg = this.encoder.encode(args.level, args.msg, args.meta);
      return this._write(msg + "\n", function(err) {
        if (cb) {
          return cb(err, msg, args.level, _this.name);
        }
      });
    };

    Process.prototype._write = function(data, cb) {
      var _this = this;
      return this._childProcess.stdin.write(data, this.encoding, function(error) {
        if (error != null) {
          return cb(buildError(_this.command, _this["arguments"], error));
        } else {
          return cb(null);
        }
      });
    };

    return Process;

  })(events.EventEmitter);

  module.exports = {
    Process: Process
  };

}).call(this);

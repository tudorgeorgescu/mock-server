// Generated by CoffeeScript 1.3.3

/*
@license
common.js: Common helpers for the entire module

(c) 2012 Panther Development
MIT LICENSE
*/


(function() {
  var colors, common, cycle, util;

  common = module.exports;

  util = require("util");

  colors = require("colors");

  cycle = require("cycle");

  /*
  Sets a variable to the default if it is unset
  @return {mixed} The option set
  @param {mixed} opt The option value passed
  @param {mixed} val The default value to set
  */


  common.checkOption = function(opt, val) {
    if (typeof opt === "undefined") {
      return val;
    } else {
      return opt;
    }
  };

  /*
  Title cases a passed string. Changes "help" to "Help"
  @return {string} Title-cased version of passes string
  @param {string} str The string to captialize
  */


  common.titleCase = function(str) {
    var lines;
    lines = str.split("\n");
    lines.forEach(function(line, l) {
      var words;
      words = line.split(" ");
      words.forEach(function(word, w) {
        return words[w] = word[0].toUpperCase() + word.slice(1);
      });
      return lines[l] = words.join(" ");
    });
    return lines.join("\n");
  };

  /*
  Generates a random GUID
  @return {string} GUID
  */


  common.generateGuid = function() {
    /*
      Generates 4 hex characters
      @return {string} 4 character hex string
    */

    var S4;
    S4 = function() {
      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
  };

  /*
  Padds a string to the length specified
  @return {string} Padded string
  @param {string} str String to pad
  @param {string} pad What to pad the string with
  @param {number} len The length of final string
  */


  common.pad = function(str, pad, len) {
    while (str.length < len) {
      str = pad + str;
    }
    return str;
  };

  /*
  Colorizes a string based on a level
  @return {string} Colorized string
  @param {string} str The string to colorize
  @param {string} level The level the string should be colorized to
  */


  common.colorize = function(str, level, colors) {
    return str[colors[level]];
  };

  /*
  Prepares an arguments array for use by a log function
  @return {object} Perpares arguments for a log method
  @param {array} args The arguments to prepare
  */


  common.prepareArgs = function(args) {
    var argStart, cb, fargs, level, lmsg, meta, msg;
    level = args[0], msg = args[1], meta = args[2], cb = args[3];
    argStart = 2;
    fargs = void 0;
    lmsg = args[2];
    if (typeof meta === 'function') {
      cb = meta;
      meta = void 0;
    }
    return {
      level: level,
      msg: msg,
      meta: meta,
      cb: cb
    };
  };

}).call(this);

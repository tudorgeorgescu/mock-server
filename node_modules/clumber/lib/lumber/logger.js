// Generated by CoffeeScript 1.3.3

/*
@license
logger.js: Core logger functionality

(c) 2012 Panther Development
MIT LICENSE
*/


(function() {
  var Logger, Stream, async, events, lumber, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require("events");

  util = require("util");

  async = require("async");

  lumber = require("../lumber");

  Stream = require("stream").Stream;

  /*
  Core Logger class that does the work of logging
  via one or more transports
  @constructor
  @param {object} options The options for this logger
  */


  Logger = (function(_super) {

    __extends(Logger, _super);

    function Logger(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      Logger.__super__.constructor.call(this);
      this.levels = options.levels || lumber.defaults.levels;
      this.colors = options.colors || lumber.defaults.colors;
      this.transports = options.transports || [new lumber.transports.Console()];
      this.level = options.level || "info";
      Object.keys(this.levels).forEach(function(key) {
        return _this[key] = function() {
          var args;
          args = Array.prototype.slice.call(arguments);
          args.unshift(key);
          return _this.log.apply(_this, args);
        };
      });
      this.transports.forEach(function(trans) {
        trans.parent = this;
        return trans.encoder.colors = this.colors;
      });
    }

    Logger.prototype.log = function() {
      var args, cb, done, errors,
        _this = this;
      args = lumber.util.prepareArgs(Array.prototype.slice.call(arguments));
      cb = args.cb;
      done = 0;
      errors = [];
      return async.forEach(this.transports, function(trans, next) {
        if (_this.levels[_this.level] >= 0 && _this.levels[args.level] >= 0 && _this.levels[args.level] <= _this.levels[trans.level]) {
          return trans.log(args, function() {
            var a;
            a = Array.prototype.slice.call(arguments);
            a.unshift("log");
            _this.emit.apply(_this, a);
            return next();
          });
        } else {
          return next();
        }
      }, function(err) {
        _this.emit("logged", err);
        if (cb) {
          return cb(err);
        }
      });
    };

    return Logger;

  })(events.EventEmitter);

  module.exports = Logger;

}).call(this);
